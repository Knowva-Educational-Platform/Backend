// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../@prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model OtpToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  otp       String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            Int            @id @default(autoincrement())
  name          String
  email         String         @unique
  password      String
  role          Role
  gender        Gender?
  avatar        String?
  phone         String?
  bio           String?
  subjects      Subject[]      @relation("TeacherSubjects")
  memberships   Membership[]
  messages      Message[]
  notifications Notification[]
  createdAt     DateTime       @default(now())
  publicId      String?

  quizAttempts QuizAttempt[]

  OtpToken OtpToken[]
  
  ConversationStudent Conversation[] @relation("StudentConversations")

  ConversationTeacher Conversation[] @relation("TeacherConversations")
  
  Group Group[]

  accounts Account[]

  createdQuizzes Quiz[]

  createdQuestions Question[]
}

enum Gender {
  MALE
  FEMALE
}

enum Role {
  STUDENT
  TEACHER
}

model Account {
  userId            Int
  provider          Provider
  providerAccountId String
  accessToken       String?
  refreshToken      String?
  expiresAt         DateTime?
  user              User      @relation(fields: [userId], references: [id])

  @@id([provider, userId]) // in case only one account per user
  @@unique([provider, providerAccountId])
}

enum Provider {
  GOOGLE
  FACEBOOK
}

model Subject {
  id            Int            @id @default(autoincrement())
  title         String
  description   String?
  teacher       User           @relation("TeacherSubjects", fields: [teacherId], references: [id])
  teacherId     Int
  groups        Group[]
  lessons       Lesson[]
  quizzes       Quiz[]
  conversations Conversation[]
  createdAt   DateTime  @default(now())  
}

enum GroupStatus {
  ACTIVE
  COMPLETED
  INACTIVE
}

model Group {
  id           Int          @id @default(autoincrement())
  name         String
  capacity     Int
  status       GroupStatus  @default(ACTIVE)   // ðŸ‘ˆ new status field
  subject      Subject      @relation(fields: [subjectId], references: [id])
  subjectId    Int
  memberships  Membership[]
  createdBy    User         @relation(fields: [createdById], references: [id])
  createdById  Int
  Conversation Conversation[]
  lessons      LessonGroup[]
  createdAt   DateTime  @default(now()) 

  Quiz Quiz[]
}


model Membership {
  id        Int    @id @default(autoincrement())
  status    Status @default(PENDING)
  student   User   @relation(fields: [studentId], references: [id])
  studentId Int
  group     Group  @relation(fields: [groupId], references: [id])
  groupId   Int
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}




model Lesson {
  id        Int      @id @default(autoincrement())
  type      String
  title     String
  url       String
  publicId  String
  createdAt DateTime @default(now())
  subject   Subject  @relation(fields: [subjectId], references: [id])
  subjectId Int
  groups    LessonGroup[]
}

model LessonGroup {
  id        Int     @id @default(autoincrement())
  lesson    Lesson  @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId  Int
  group     Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   Int
  createdAt DateTime @default(now())

  @@unique([lessonId, groupId])
}

enum LessonType {
  PDF
  VIDEO
  DOC
}

// model GroupConversation {
//   id        Int            @id @default(autoincrement())
//   group     Group          @relation(fields: [groupId], references: [id])
//   groupId   Int            @unique
//   messages  GroupMessage[]
//   createdAt DateTime       @default(now())
// }

// model GroupMessage {
//   id              Int              @id @default(autoincrement())
//   conversation    GroupConversation @relation(fields: [conversationId], references: [id])
//   conversationId  Int
//   sender          User             @relation(fields: [senderId], references: [id])
//   senderId        Int
//   content         String
//   mediaUrl        String?
//   mediaType       String?
//   deliveredTo     String[]         @default([])
//   readBy          String[]         @default([])
//   createdAt       DateTime         @default(now())
// }

model Quiz {
  id              Int      @id @default(autoincrement())
  title           String
  status          QuizStatus @default(DRAFT)
  subject         Subject  @relation(fields: [subjectId], references: [id])
  subjectId       Int
  group           Group    @relation(fields: [groupId], references: [id])
  groupId         Int
  createdBy       User     @relation(fields: [createdById], references: [id])
  createdById     Int
  startsAt        DateTime
  endsAt          DateTime
  isActive        Boolean  @default(false)
  canChangeAnswer Boolean  @default(true)

  questions QuizQuestion[]

  attempts QuizAttempt[]

  @@index([id, createdById])
}

enum QuizStatus {
  DRAFT
  PUBLIC
}

model Question {
  id          Int             @id @default(autoincrement())
  question    String
  type        QuestionType
  options     String[]
  answer      String
  createdBy   User?           @relation(fields: [createdById], references: [id])
  createdById Int?
  mode        QuestionMode
  score       Float
  answers     StudentAnswer[]

  quizzes     QuizQuestion[]

  @@index([id, createdById])
}

model QuizQuestion {
  id         Int      @id @default(autoincrement())
  quiz       Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId     Int
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int

  @@unique([quizId, questionId])
}

enum QuestionType {
  MCQ
  TrueFalse
  Written
}

enum QuestionMode {
  MANUAL
  AI
}

model QuizAttempt {
  id             Int             @id @default(autoincrement())
  quiz           Quiz            @relation(fields: [quizId], references: [id])
  quizId         Int
  student        User            @relation(fields: [studentId], references: [id])
  studentId      Int
  score          Float?
  createdAt      DateTime        @default(now())
  studentAnswers StudentAnswer[]
}

model StudentAnswer {
  id            Int         @id @default(autoincrement())
  question      Question    @relation(fields: [questionId], references: [id])
  questionId    Int
  quizAttempt   QuizAttempt @relation(fields: [quizAttemptId], references: [id])
  quizAttemptId Int
  answer        String
  score         Float       @default(0)

  @@unique([quizAttemptId, questionId])
}

model Conversation {
  id          Int       @id @default(autoincrement())
  isGroup     Boolean   @default(false) // determines if it's a group or direct chat
  
  // For direct conversations (isGroup = false)
  student     User?     @relation("StudentConversations", fields: [studentId], references: [id])
  studentId   Int?
  teacher     User?     @relation("TeacherConversations", fields: [teacherId], references: [id])
  teacherId   Int?
  
  // For group conversations (isGroup = true)
  group       Group?    @relation(fields: [groupId], references: [id])
  groupId     Int?      @unique
  
  // Common fields
  messages    Message[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  subjects    Subject[]

  // Constraints to ensure data integrity
  @@unique([studentId, teacherId]) // ensure one conversation per student-teacher pair
  
  // Custom validation logic needed at application level:
  // - If isGroup = false: studentId and teacherId must be set, groupId must be null
  // - If isGroup = true: groupId must be set, studentId and teacherId must be null
}

model Message {
  id             Int          @id @default(autoincrement())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId Int
  sender         User         @relation(fields: [senderId], references: [id])
  senderId       Int
  content        String
  
  // Enhanced fields for both direct and group messages
  mediaUrl       String?      // for file attachments
  mediaType      String?      // type of media (image, video, document, etc.)
  
  // For group messages - track delivery and read status
  deliveredTo    String[]     @default([]) // array of user IDs who received the message
  readBy         String[]     @default([]) // array of user IDs who read the message
  
  // Timestamps
  timestamp      DateTime     @default(now())
  createdAt      DateTime     @default(now())
  readAt         DateTime?    // for direct messages, single read timestamp
}


enum NotificationType {
  LESSON_ADDED
  GROUP_JOINED
  GROUP_LEFT
  QUIZ_ASSIGNED
  QUIZ_COMPLETED
  MESSAGE_RECEIVED
  GENERAL
}

model Notification {
  id        Int              @id @default(autoincrement())
  user      User             @relation(fields: [userId], references: [id])
  userId    Int
  message   String
  type      NotificationType @default(GENERAL)
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
}
